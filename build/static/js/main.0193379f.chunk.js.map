{"version":3,"sources":["comps/nav.js","comps/appMap.js","comps/starter.js","comps/single.js","comps/header.js","comps/main.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","input","useRef","history","useHistory","className","ref","type","onClick","current","value","alert","push","to","MapApp","console","log","latlng","Map","center","zoom","TileLayer","url","attribution","Marker","position","Starter","useState","country","setCountry","borders","setBorders","useEffect","fetch","then","resp","json","data","name","population","languages","currencies","src","flag","map","item","i","key","Single","loading","setLoading","match","includes","country1","slice","temp","Header","Main","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0193379f.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction Nav(props) {\r\n  let input = useRef(null);\r\n  let history = useHistory();\r\n\r\n  const getInput = () => {\r\n    if (input.current.value === \"\") return alert(\"must enter value\");\r\n    history.push(`/country/${input.current.value}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"nav container-fluid row justify-content-between align-items-center bg-dark\">\r\n      <input className=\"ml-3\" ref={input} type=\"text\" />\r\n      <button className=\"btn btn-warning float-left\" onClick={getInput}>\r\n        Search\r\n      </button>\r\n      <Link className=\"text-white\" to=\"/country/thailand\">\r\n        Thailand\r\n      </Link>\r\n      <Link className=\"text-white\" to=\"/country/israel\">\r\n        Israel\r\n      </Link>\r\n      <Link className=\"text-white\" to=\"/country/france\">\r\n        France\r\n      </Link>\r\n      <Link className=\"text-white\" to=\"/country/United States of America\">\r\n        USA\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect } from \"react\";\r\nimport { Map, Marker, TileLayer } from \"react-leaflet\";\r\n// import \"./App.css\";\r\n\r\nfunction MapApp(props) {\r\n  console.log(props.latlng);\r\n  return (\r\n    <Map\r\n      className=\"map border border-dark\"\r\n      center={[props.latlng[0], props.latlng[1]]}\r\n      zoom={7}\r\n    >\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      <Marker position={[props.latlng[0], props.latlng[1]]} />\r\n    </Map>\r\n  );\r\n}\r\n\r\nexport default MapApp;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MapApp from \"./appMap\";\r\n\r\nfunction Starter(props) {\r\n  let [country, setCountry] = useState({});\r\n  let [borders, setBorders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let url = `https://restcountries.eu/rest/v2/name/israel?fullText=true`;\r\n    fetch(url)\r\n      .then((resp) => resp.json())\r\n      .then((data) => {\r\n        setCountry(data);\r\n        setBorders(data[0].borders);\r\n      });\r\n  });\r\n\r\n  return (\r\n    <div className=\" p-3 \">\r\n      {country[0] ? (\r\n        <div className=\"p-2\">\r\n          <div className=\"border border-dark container justify-content-around overflow-hidden\">\r\n            <div className=\" p-2 w-25 float-right\">\r\n              <MapApp latlng={country[0].latlng} />\r\n            </div>\r\n            <h1 className=\"\">{country[0].name}</h1>\r\n            <div className=\"\">Population: {country[0].population}</div>\r\n            <div className=\"\">Languages: {country[0].languages[0].name}</div>\r\n            <div className=\"\">Coins: {country[0].currencies[0].name}</div>\r\n            <img className=\"text-center w-25\" src={country[0].flag} />\r\n\r\n            <div className=\"row justify-content-around\">\r\n              {\" \"}\r\n              Borders:\r\n              {borders.map((item, i) => (\r\n                <Link key={i} to={`/code/${item}`}>\r\n                  {item}\r\n                </Link>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h2>Loading</h2>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Starter;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MapApp from \"./appMap\";\r\n\r\nfunction Single(props) {\r\n  let [country, setCountry] = useState({});\r\n  let [borders, setBorders] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (props.match.url.includes(\"country\")) {\r\n      let country1 = props.match.url.slice(9);\r\n      let url = `https://restcountries.eu/rest/v2/name/${country1}?fullText=true`;\r\n      fetch(url)\r\n        .then((resp) => resp.json())\r\n        .then((data) => {\r\n          setBorders(data[0].borders);\r\n          setCountry(data);\r\n          setLoading(false);\r\n        });\r\n    } else if (props.match.url.includes(\"code\")) {\r\n      let country1 = props.match.url.slice(6);\r\n      let url = `https://restcountries.eu/rest/v2/alpha/${country1}`;\r\n      fetch(url)\r\n        .then((resp) => resp.json())\r\n        .then((data) => {\r\n          setBorders(data.borders);\r\n          let temp = [];\r\n          temp.push(data);\r\n          setCountry(temp);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [props.match]);\r\n\r\n  return (\r\n    <div className=\"p-3\">\r\n      {country[0] ? (\r\n        <div className=\"p-2\">\r\n          <div className=\"border border-dark container justify-content-around overflow-hidden\">\r\n            <div className=\" p-2 w-25 float-right\">\r\n              <MapApp latlng={country[0].latlng} />\r\n            </div>\r\n            <h1 className=\"\">{country[0].name}</h1>\r\n            <div className=\"\">Population: {country[0].population}</div>\r\n            <div className=\"\">Languages: {country[0].languages[0].name}</div>\r\n            <div className=\"\">Coins: {country[0].currencies[0].name}</div>\r\n            <img className=\"text-center w-25\" src={country[0].flag} />\r\n\r\n            <div className=\"row justify-content-around\">\r\n              {\" \"}\r\n              Borders:\r\n              {borders.map((item, i) => (\r\n                <Link key={i} to={`/code/${item}`}>\r\n                  {item}\r\n                </Link>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : loading ? (\r\n        <h2>Loading</h2>\r\n      ) : (\r\n        <h2>Nothing Found</h2>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Single;\r\n\r\n{\r\n}\r\n\r\n{\r\n  /* <div>\r\n            {country.map((item) => {\r\n              <Items key={item.callingCodes} item={item} />;\r\n            })}\r\n          </div> */\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header className=\"container text-center d-flex align-items-center justify-content-center\">\r\n      <h2 className=\"h2\">Atlas World</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Nav from \"./nav\";\r\nimport Starter from \"./starter\";\r\nimport Single from \"./single\";\r\nimport Header from \"./header\";\r\n\r\nfunction Main(props) {\r\n  return (\r\n    <div className=\"container d-flex flex-column\">\r\n      <Header />\r\n      <Nav />\r\n      <Switch>\r\n        {/* <Route\r\n          exact\r\n          path={[\"/\", \"/country/:country\", \"/code/:code\"]}\r\n          component={Header}\r\n        /> */}\r\n        <Route exact path=\"/\" component={Starter} />\r\n        <Route exact path=\"/country/:country\" component={Single} />\r\n        <Route exact path=\"/code/:code\" component={Single} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Main from \"./comps/main\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Main />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}